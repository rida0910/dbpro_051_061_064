@model IEnumerable<FreelancerMarketplace.Models.Job>

@{
    ViewBag.Title = "AvailableJobs";
    Layout = "~/Views/Shared/_LayoutFreelancer.cshtml";
}

@using (Html.BeginForm())
{
    <body class="gray">

        <!-- Wrapper -->
        <div id="wrapper">


            <div class="clearfix"></div>
            <!-- Header Container / End -->
            <!-- Spacer -->
            <!-- Spacer / End-->
            <!-- Page Content
            ================================================== -->
            <div class="container">
                <div class="row">
                    <div class="col-xl-3 col-lg-4">
                        <div class="sidebar-container">

                            <!-- Location -->
                            <div class="sidebar-widget">
                                
                                   
                            </div>


                            <!-- Category -->
                            <div class="sidebar-widget">
                                <h3>Category</h3>
                                @Html.DropDownList("CategoryId", null, "--Select Category--", htmlAttributes: new { @class = "form-control" })
                            </div>




                            <!-- Budget -->
                            <div class="sidebar-widget">
                                <h3>Price</h3>
                                <div class="margin-top-55"></div>

                                <!-- Range Slider -->
                                <input class="range-slider" type="text" value="" data-slider-currency="PKR" data-slider-min="10" data-slider-max="10000" data-slider-step="25" data-slider-value="[10,2500]" name="PaymentRange" />
                            </div>

                            <input type="submit" value="Apply search filters" class="button ripple-effect move-on-hover full-width margin-top-30" />

                            <div class="clearfix"></div>

                        </div>
                    </div>










                    <div class="col-xl-9 col-lg-8 content-left-offset">



                        <!-- Tasks Container -->
                        <div class="tasks-list-container tasks-grid-layout margin-top-35">







                            @foreach (var item in Model)
                            {
                                <!-- Task -->
                                <a href="@Url.Action("Bid", "Freelancers", new { id = item.JobId })" class="task-listing">

                                    <!-- Job Listing Details -->
                                    <div class="task-listing-details">

                                        <!-- Details -->
                                        <div class="task-listing-description">
                                            <h3 class="task-listing-title"> @Html.DisplayFor(modelItem => item.Title)</h3>
                                            <ul class="task-icons">
                                                <li><i class="icon-material-outline-access-time"></i> @GetPrettyDate(item.TimePosted)</li>
                                            </ul>
                                        </div>

                                    </div>

                                    <div class="task-listing-bid">
                                        <div class="task-listing-bid-inner">
                                            <div class="task-offers">
                                                <strong> @Html.DisplayFor(modelItem => item.MinPayment) PKR - @Html.DisplayFor(modelItem => item.MaxPayment) PKR</strong>

                                            </div>
                                            <span class="button button-sliding-icon ripple-effect">Bid Now <i class="icon-material-outline-arrow-right-alt"></i></span>
                                        </div>
                                    </div>
                                </a>

                            }

                        </div>
                        <!-- Tasks Container / End -->
                    </div>
                </div>
            </div>
        </div>

        <!-- Wrapper / End -->
    </body>
}




@functions {

    static string GetPrettyDate(DateTime d)
    {
        // 1.
        // Get time span elapsed since the date.
        TimeSpan s = DateTime.Now.Subtract(d);

        // 2.
        // Get total number of days elapsed.
        int dayDiff = (int)s.TotalDays;

        // 3.
        // Get total number of seconds elapsed.
        int secDiff = (int)s.TotalSeconds;

        // 4.
        // Don't allow out of range values.
        if (dayDiff < 0 || dayDiff >= 31)
        {
            return null;
        }

        // 5.
        // Handle same-day times.
        if (dayDiff == 0)
        {
            // A.
            // Less than one minute ago.
            if (secDiff < 60)
            {
                return "just now";
            }
            // B.
            // Less than 2 minutes ago.
            if (secDiff < 120)
            {
                return "1 minute ago";
            }
            // C.
            // Less than one hour ago.
            if (secDiff < 3600)
            {
                return string.Format("{0} minutes ago",
                    Math.Floor((double)secDiff / 60));
            }
            // D.
            // Less than 2 hours ago.
            if (secDiff < 7200)
            {
                return "1 hour ago";
            }
            // E.
            // Less than one day ago.
            if (secDiff < 86400)
            {
                return string.Format("{0} hours ago",
                    Math.Floor((double)secDiff / 3600));
            }
        }
        // 6.
        // Handle previous days.
        if (dayDiff == 1)
        {
            return "yesterday";
        }
        if (dayDiff < 7)
        {
            return string.Format("{0} days ago",
                dayDiff);
        }
        if (dayDiff < 31)
        {
            return string.Format("{0} weeks ago",
                Math.Ceiling((double)dayDiff / 7));
        }
        return null;
    }
}
